{"version":3,"file":"static/js/736.1c618ca5.chunk.js","mappings":"uTAEaA,EAAOC,EAAAA,EAAAA,GAAH,6GAKJC,EAAWD,EAAAA,EAAAA,GAAH,+HAORE,EAAMF,EAAAA,EAAAA,IAAH,4EAMHG,EAAcH,EAAAA,EAAAA,IAAH,iH,SC2CxB,EAvDa,WACT,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KA6BA,OA3BAC,EAAAA,EAAAA,YAAU,WACND,GAAa,GACb,IAAME,EAAS,mCAAG,8GAEWC,EAAAA,EAAAA,IAAaN,GAFxB,OAERO,EAFQ,OAGdR,EAAQQ,GAHM,gDAKdC,QAAQC,MAAR,MALc,yBAOdN,GAAa,GAPC,4EAAH,qDAWfE,GACD,GAAE,CAACL,KAcF,yBACDE,GACC,SAACQ,EAAA,EAAD,KACC,SAAClB,EAAD,UACAM,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,KAAMC,EAA9B,EAA8BA,UAA9B,OACR,UAACrB,EAAD,YACE,SAACC,EAAD,CACEqB,IAAKH,EAAeI,EAAAA,EAAeJ,EAAeK,EAClDC,IAAKL,KAEP,UAAClB,EAAD,YACE,uBAAIkB,KACJ,uCAAeC,UAPJH,EADP,OAgBjB,C,6EC3DYF,EAAS,WAClB,OACI,gBAAKU,UAAU,gBAAf,UACI,SAAC,KAAD,CACIC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,eACVC,OAAO,OACPC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIxB,C,mMCfDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAU,mCAEVC,EAAiB,mCAAG,oGACNF,EAAAA,EAAAA,IAAA,uBAEf,CACIG,OAAQ,CACJC,QAASH,EACTI,KAAM,KANO,cACnBC,EADmB,yBAUlBA,EAAKC,KAAKC,SAVQ,2CAAH,qDAajBC,EAAe,mCAAI,WAAMC,GAAN,uFACTV,EAAAA,EAAAA,IAAA,8CACqBU,EADrB,+BAEnB,CACIP,OAAQ,CACJC,QAASH,EACTI,KAAM,KANc,cACtBC,EADsB,yBAUrBA,EAAKC,KAAKC,SAVW,2CAAJ,sDAafG,EAAe,mCAAI,WAAMxC,GAAN,uFACT6B,EAAAA,EAAAA,IAAA,gBAAmB7B,EAAnB,oBACnB,CACIgC,OAAQ,CACJC,QAASH,KAJW,cACtBK,EADsB,yBAQrBA,EAAKC,MARgB,2CAAJ,sDAUf9B,EAAY,mCAAG,WAAMN,GAAN,uFACL6B,EAAAA,EAAAA,IAAA,gBAAmB7B,EAAnB,6BACnB,CACIgC,OAAQ,CACJC,QAASH,KAJO,cAClBK,EADkB,yBAQjBA,EAAKC,KAAKtC,MARO,2CAAH,sDAWZ2C,EAAgB,mCAAG,WAAMzC,GAAN,uFACX6B,EAAAA,EAAAA,IAAA,gBAAmB7B,EAAnB,6BAAkD,CACnEgC,OAAQ,CACNC,QAASH,KAHiB,cACxBK,EADwB,yBAMvBA,EAAKC,KAAKC,SANa,2CAAH,qD,uDCrDtB,IAAMpB,EAAe,iC","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/apiService.js","services/constants.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px; ;\n`;\nexport const ListItem = styled.li`\n  display: block;\n  width: 200px;\n  margin: 5px;\n  border: 1px solid black;\n  border-radius: 4px;\n`;\nexport const IMG = styled.img`\n  width: 100%;\n  height: auto;\n  display: block;\n`;\n\nexport const TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-items: center;\n`;","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCast } from \"services/apiService\";\nimport { BASE_IMG_URL } from \"services/constants\";\nimport { Loader } from 'components/Loader/Loader';\nimport placeholder from '../../Img/placeholder.webp';\nimport { IMG, List, ListItem, TextWrapper } from './Cast.styled';\n\nconst Cast = ( ) => {\n    const [cast, setCast] = useState([]);\n    const { id } = useParams();\n    const [isloading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        setIsLoading(true)\n        const fetchCast = async () => {\n          try {\n            const moviesCast = await getMovieCast(id);\n            setCast(moviesCast);\n          } catch (error) {\n            console.error(error)\n          } finally {\n            setIsLoading(false)\n          }\n        }\n        \n        fetchCast()\n      }, [id]);\n\n    // // useEffect(() => {getMovieCast(id).then(setCast);}, [id]); \n    // useEffect(() => {\n    //     getMovieCast(id).then(setCast); \n    //     // console.log(cast);\n    //     // const result = getMovieCast(id)\n    //     // setCast(result);\n    //     // console.log(cast, 'person') \n    //     // cast.map(person => {\n    //     //     console.log(person, 'person') \n    //     // })\n    // }, [id]); \n    return (\n        <div>\n      {isloading ? (\n        <Loader/>\n      ):(<List>\n        {cast.map(({ order, profile_path, name, character }) => (\n          <ListItem key={order}>\n            <IMG\n              src={profile_path ? BASE_IMG_URL + profile_path : placeholder}\n              alt={name}\n            />\n            <TextWrapper>\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </TextWrapper>\n          </ListItem>\n        ))}\n      </List>)}\n      \n    </div>\n        )\n}; \n\nexport default Cast;","import { Grid } from \"react-loader-spinner\";\n\nexport const Loader = () => {\n    return (\n        <div className=\"LoaderSection\">\n            <Grid\n                height=\"80\"\n                width=\"80\"\n                color=\"#3f51b5\"\n                ariaLabel=\"grid-loading\"\n                radius=\"12.5\"\n                wrapperStyle={{}}\n                wrapperClass=\"\"\n                visible={true}\n            />\n        </div>\n    );\n};","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_KEY = '30f8890b4b18c3650777b7120811d941';\n                            \nexport const getTrendingMovies = async () =>  { \n        const resp = await axios.get(\n            `/trending/movie/day?`,\n            {\n                params: {\n                    api_key: API_KEY,\n                    page: 1,\n                },\n            }\n        );\n        return resp.data.results;\n}; \n\nexport const getMovieByQuery =  async query => {\n    const resp = await axios.get\n    (`/search/movie?&language=en-US&query=${query}&page=1&include_adult=false`, \n    {\n        params: {\n            api_key: API_KEY,\n            page: 1,\n        },\n    }\n    );\n    return resp.data.results;\n};\n\nexport const getMovieDetails =  async id => {\n    const resp = await axios.get(`movie/${id}?&language=en-US`, \n    {\n        params: {\n            api_key: API_KEY,\n        },\n    }\n    );\n    return resp.data;\n};\nexport const getMovieCast = async id => {\n    const resp = await axios.get(`movie/${id}/credits?&language=en-US `, \n    {\n        params: {\n            api_key: API_KEY,\n        },\n    }\n    );\n    return resp.data.cast ;\n};\n\nexport const getMoviesReviews = async id => {\n  const resp = await axios.get(`movie/${id}/reviews?&language=en-US `, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return resp.data.results;\n};","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w400';"],"names":["List","styled","ListItem","IMG","TextWrapper","useState","cast","setCast","id","useParams","isloading","setIsLoading","useEffect","fetchCast","getMovieCast","moviesCast","console","error","Loader","map","order","profile_path","name","character","src","BASE_IMG_URL","placeholder","alt","className","height","width","color","ariaLabel","radius","wrapperStyle","wrapperClass","visible","axios","API_KEY","getTrendingMovies","params","api_key","page","resp","data","results","getMovieByQuery","query","getMovieDetails","getMoviesReviews"],"sourceRoot":""}